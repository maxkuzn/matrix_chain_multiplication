#include "gtest/gtest.h"

#include <matrix/matrix.h>

TEST(matrix, simple) {
  size_t rows = 2;
  size_t columns = 3;
  Matrix a(rows, columns);
  ASSERT_EQ(a.rows(), rows);
  ASSERT_EQ(a.columns(), columns);
  ASSERT_EQ(a.size(), rows * columns);

  double value = 4.5;
  a[0][1] = value;
  ASSERT_EQ(a[0][1], value);
};

TEST(matrix, constructor) {
  Matrix a({
    {1, 2},
    {3, 4},
  });

  ASSERT_EQ(a.rows(), 2);
  ASSERT_EQ(a.columns(), 2);
  ASSERT_EQ(a.size(), 4);

  ASSERT_EQ(a[0][0], 1);
  ASSERT_EQ(a[0][1], 2);
  ASSERT_EQ(a[1][0], 3);
  ASSERT_EQ(a[1][1], 4);
  ASSERT_EQ(a(0, 0), 1);
  ASSERT_EQ(a(0, 1), 2);
  ASSERT_EQ(a(1, 0), 3);
  ASSERT_EQ(a(1, 1), 4);
};

TEST(matrix, comparison) {
  Matrix a(2, 2, 1);
  Matrix b(2, 2, 1);
  Matrix c({
    {1, 2},
    {3, 4}
  });
  Matrix d({
    {1, 2},
    {3, 4}
  });
  Matrix e(3, 1);

  ASSERT_EQ(a[0][0], 1);
  ASSERT_EQ(a[0][1], 1);
  ASSERT_EQ(a[1][0], 1);
  ASSERT_EQ(a[1][1], 1);

  ASSERT_EQ(a, b);
  ASSERT_EQ(c, d);
  ASSERT_NE(a, c);
  ASSERT_NE(a, e);
  ASSERT_NE(c, e);

  ASSERT_EQ(a.shape(), b.shape());
  ASSERT_EQ(a.shape(), c.shape());
  ASSERT_NE(a.shape(), e.shape());
  ASSERT_EQ(c.shape(), c.shape());
};

TEST(matrix, simple_multiplication) {
  Matrix a({
    {1, 2, 3},
    {4, 5, 6},
  });
  Matrix b({
    {10, 11},
    {20, 21},
    {30, 31},
  });

  Matrix c({
    {140, 146},
    {320, 335},
  });

  ASSERT_EQ(a * b, c);
};

TEST(matrix, multiplication) {
  Matrix a({
    {0.40199835, 0.37029801, 0.61102576, 0.17835835, 0.2461696 },
    {0.3266257 , 0.62684433, 0.13792363, 0.59128876, 0.34036966},
    {0.03347098, 0.7246467 , 0.17969112, 0.4456613 , 0.51610925},
    {0.47770962, 0.08543242, 0.92767435, 0.31339389, 0.38372254},
    {0.12375454, 0.38289236, 0.54013271, 0.28690623, 0.26514941},
    {0.47674592, 0.35640594, 0.86710179, 0.9073233 , 0.23553511},
    {0.38062645, 0.4864423 , 0.32414678, 0.34324775, 0.8434154 },
    {0.53439438, 0.51401643, 0.03076235, 0.94048029, 0.3663781 },
    {0.27985276, 0.87436671, 0.8412554 , 0.25280363, 0.29756498},
    {0.01754237, 0.18062138, 0.18415805, 0.35511816, 0.71773162},
  });
  Matrix b({
    {0.22983527, 0.22027816, 0.04965555, 0.96865195, 0.17385074,
     0.6311963 , 0.80878371, 0.45254883, 0.02349037, 0.77139744},
    {0.69256766, 0.17378266, 0.06146016, 0.90930615, 0.30766206,
     0.30066921, 0.72883601, 0.59076336, 0.39939154, 0.39591231},
    {0.30218584, 0.08489832, 0.38345752, 0.37085982, 0.61278945,
     0.25856758, 0.41986014, 0.74482741, 0.37730081, 0.39891084},
    {0.73465228, 0.23875392, 0.37432839, 0.5232349 , 0.11503078,
     0.48970961, 0.0523924 , 0.88800026, 0.70591518, 0.19705686},
    {0.92141936, 0.93278158, 0.80999265, 0.26150499, 0.50138687,
     0.64877131, 0.16551972, 0.17209484, 0.82032568, 0.58261387}
  });

  Matrix c({
    {0.89134997, 0.47698412, 0.54318261, 1.11041354, 0.70218741,
     0.77012011, 0.90165215, 1.0565379 , 0.71572261, 0.8790194 },
    {1.29889561, 0.65125572, 0.60466567, 1.33592163, 0.57283176,
     0.94068216, 0.86626182, 1.20450047, 1.00668126, 0.86997443},
    {1.36681893, 0.73638001, 0.6999712 , 1.12613833, 0.64891324,
     0.8385495 , 0.73944004, 1.06164792, 1.09597836, 0.77290973},
    {1.03309722, 0.631587  , 0.81282   , 1.1487797 , 0.90624693,
     0.96950213, 0.91805656, 1.30194508, 0.9313618 , 1.05770556},
    {0.91193259, 0.4554833 , 0.55896189, 0.88781222, 0.63624937,
     0.64542023, 0.66485575, 0.98491305, 0.77966385, 0.67353709},
    {1.50202788, 0.67689917, 0.90849313, 1.64379301, 0.94635037,
     1.22941833, 1.09592985, 1.91838126, 1.31441145, 1.17078268},
    {1.55163518, 1.06457255, 0.98474121, 1.33138908, 0.87682722,
     1.18559752, 0.9560629 , 1.15100927, 1.25970195, 1.17453326},
    {1.51662364, 0.77594832, 0.71873527, 1.58435079, 0.5617804 ,
     1.19806865, 0.92967585, 1.46661279, 1.19390227, 1.02679238},
    {1.38399851, 0.62293739, 0.72587769, 1.58822518, 1.01144988,
     0.97391054, 1.27931776, 1.54548002, 1.09575297, 1.12081832},
    {1.10699451, 0.80516046, 0.79687703, 0.62303002, 0.57218094,
     0.75254573, 0.3605562 , 0.69067216, 0.98149069, 0.64664387}
  });

  auto res = a * b;
  double dist = 0;
  for (size_t i = 0; i != res.rows(); ++i) {
    for (size_t j = 0; j != res.columns(); ++j) {
      double diff = res(i, j) - c(i, j);
      dist += diff * diff;
    }
  }
  ASSERT_EQ(a * b, c);
};

